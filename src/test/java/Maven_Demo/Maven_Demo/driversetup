import com.relevantcodes.extentreports.ExtentReports;
import com.relevantcodes.extentreports.ExtentTest;
import com.relevantcodes.extentreports.LogStatus;
import io.appium.java_client.AppiumDriver;
import io.appium.java_client.android.AndroidDriver;
import io.appium.java_client.ios.IOSDriver;
import java.io.PrintStream;
import java.net.URL;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebDriver.Navigation;
import org.openqa.selenium.WebDriver.Options;
import org.openqa.selenium.WebDriver.Timeouts;
import org.openqa.selenium.WebDriver.Window;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.firefox.FirefoxBinary;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxProfile;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.phantomjs.PhantomJSDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterSuite;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Parameters;

public class DriverSetup
{
  static Properties properties = null;
  public static AppiumDriver<WebElement> appiumdriver = null;
  public static WebDriver driver = null;
  public String TC_ID = null;
  public String appURL = null;
  WindowsProcess w = new WindowsProcess();
  public String host = null;
  public String perfectoUserName = null;
  public String perfectoPassword = null;
  public String url = null;
  ATUTestRecorder recorder = null;
  public static String bFlag = null;
  public static Log log = null;
  
  public DriverSetup()
  {
    this.host = Create_TestNGXML.getConfigData("Perfecto_Hostname");
    this.perfectoUserName = Create_TestNGXML.getConfigData("Perfecto_UserName");
    this.perfectoPassword = Create_TestNGXML.getConfigData("Perfecto_Password");
    this.url = ("https://" + this.host + "/nexperience/perfectomobile/wd/hub");
    bFlag = Create_TestNGXML.getConfigData("RecordingFlag");
    log = new Log(getClass().getName());
  }
  
  public void setDriver(int i, String[] deviceDetail)
    throws InterruptedException
  {
    if (i == 1)
    {
      if (deviceDetail[8].equalsIgnoreCase("Web"))
      {
        if (deviceDetail[0].equalsIgnoreCase("iOS")) {
          appiumdriver = initIOSDriver(deviceDetail);
        } else if (deviceDetail[0].equalsIgnoreCase("Android")) {
          appiumdriver = initAndroidDriver(deviceDetail);
        }
      }
      else if (deviceDetail[8].equalsIgnoreCase("Native_iOS")) {
        appiumdriver = initNativeIOSDriver(deviceDetail);
      } else if (deviceDetail[8].equalsIgnoreCase("Native_Android")) {
        appiumdriver = initNativeAndroidDriver(deviceDetail);
      }
    }
    else if (i == 2) {
      driver = initPerfectoWebDriver(deviceDetail);
    } else if (i == 3)
    {
      if (deviceDetail[0].equalsIgnoreCase("Chrome")) {
        driver = initChromeDriver(this.appURL);
      } else if (deviceDetail[0].equalsIgnoreCase("IE")) {
        driver = initIEDriver(this.appURL);
      } else if (deviceDetail[0].equalsIgnoreCase("firefox")) {
        driver = initFirefoxDriver(this.appURL);
      }
    }
    else if (i == 4)
    {
      if (deviceDetail[0].equalsIgnoreCase("HeadLessChrome")) {
        driver = initHeadLessChromeDriver(this.appURL);
      } else if (deviceDetail[0].equalsIgnoreCase("HeadLessIE")) {
        driver = initIEHeadLessDriver(this.appURL);
      } else if (deviceDetail[0].equalsIgnoreCase("HeadLessFireFox")) {
        driver = initHeadLessFirefoxDriver(this.appURL);
      }
    }
    else if (i == 5) {
      if (deviceDetail[0].equalsIgnoreCase("DesktopApp")) {
        driver = initWindowsDriver(this.appURL);
      }
    }
    int TimeOut = Integer.parseInt(Create_TestNGXML.getConfigData("TimeOut"));
    if (driver != null) {
      driver.manage().timeouts().implicitlyWait(TimeOut, TimeUnit.SECONDS);
    }
    if (appiumdriver != null) {
      appiumdriver.manage().timeouts().implicitlyWait(TimeOut, TimeUnit.SECONDS);
    }
  }
  
  private WebDriver initWindowsDriver(String appURL2)
  {
    return null;
  }
  
  private WebDriver initHeadLessChromeDriver(String appURL)
  {
    System.out.println("Launching google chrome with new profile..");
    System.setProperty("webdriver.chrome.driver", this.driverPath + "chromedriver.exe");
    ChromeOptions options = new ChromeOptions();
    options.addArguments(new String[] { "headless" });
    options.addArguments(new String[] { "window-size=1200x600" });
    driver = new ChromeDriver(options);
    driver.manage().window().maximize();
    driver.navigate().to(appURL);
    return driver;
  }
  
  public WebDriver initIEHeadLessDriver(String appURL)
  {
    try
    {
      System.out.println("Launching Internet Explorer with new profile..");
      System.setProperty("webdriver.ie.driver", this.driverPath + "IEDriverServer.exe");
      System.setProperty("webdriver.ie.driver", this.driverPath + "IEHeadLess.exe");
      
      System.out.println(System.getProperty("webdriver.ie.driver"));
      DesiredCapabilities cap = DesiredCapabilities.internetExplorer();
      
      cap.setCapability("ignoreProtectedModeSettings", true);
      cap.setCapability("requireWindowFocus", true);
      cap.setCapability("nativeEvents", false);
      cap.setCapability("unexpectedAlertBehaviour", "accept");
      cap.setCapability("ignoreProtectedModeSettings", true);
      cap.setCapability("disable-popup-blocking", true);
      cap.setCapability("enablePersistentHover", true);
      cap.setCapability("ignoreZoomSetting", true);
      cap.setJavascriptEnabled(true);
      driver = new InternetExplorerDriver(cap);
      driver.manage().window().maximize();
      driver.navigate().to(appURL);
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return driver;
  }
  
  private WebDriver initPerfectoWebDriver(String[] deviceDetail)
  {
    try
    {
      DesiredCapabilities capabilities = new DesiredCapabilities();
      if (deviceDetail[0].trim().length() > 0) {
        capabilities.setCapability("platformName", deviceDetail[0]);
      }
      if (deviceDetail[1].trim().length() > 0) {
        capabilities.setCapability("platformVersion", deviceDetail[1]);
      }
      if (deviceDetail[2].trim().length() > 0) {
        capabilities.setCapability("browserName", deviceDetail[2]);
      }
      if (deviceDetail[3].trim().length() > 0) {
        capabilities.setCapability("browserVersion", deviceDetail[3]);
      }
      if (deviceDetail[4].trim().length() > 0) {
        capabilities.setCapability("resolution", deviceDetail[4]);
      }
      if (deviceDetail[5].trim().length() > 0) {
        capabilities.setCapability("location", deviceDetail[5]);
      }
      capabilities.setCapability("user", this.perfectoUserName);
      capabilities.setCapability("password", this.perfectoPassword);
      capabilities.setJavascriptEnabled(true);
      driver = new RemoteWebDriver(new URL(this.url), capabilities);
      driver.get(this.appURL);
      System.out.println(driver);
    }
    catch (Exception e)
    {
      System.out.println("Error in getting driver ->" + e.getMessage());
      e.printStackTrace();
    }
    return driver;
  }
  
  public AppiumDriver<WebElement> initNativeIOSDriver(String[] deviceDetails)
    throws InterruptedException
  {
    try
    {
      DesiredCapabilities capabilities = new DesiredCapabilities();
      
      capabilities.setCapability("bundleId", Create_TestNGXML.getConfigData("AppPackageName"));
      capabilities.setCapability("autoInstrument", true);
      capabilities.setCapability("fullReset", false);
      if (deviceDetails[0].trim().length() > 0) {
        capabilities.setCapability("platformName", deviceDetails[0]);
      }
      if (deviceDetails[1].trim().length() > 0) {
        capabilities.setCapability("platformVersion", deviceDetails[1]);
      }
      if (deviceDetails[2].trim().length() > 0) {
        capabilities.setCapability("manufacturer", deviceDetails[2]);
      }
      if (deviceDetails[3].trim().length() > 0) {
        capabilities.setCapability("model", deviceDetails[3]);
      }
      if (deviceDetails[4].trim().length() > 0) {
        capabilities.setCapability("location", deviceDetails[4]);
      }
      if (deviceDetails[5].trim().length() > 0) {
        capabilities.setCapability("resolution", deviceDetails[5]);
      }
      if (deviceDetails[6].trim().length() > 0) {
        capabilities.setCapability("network", deviceDetails[6]);
      }
      if (deviceDetails[7].trim().length() > 0) {
        capabilities.setCapability("deviceName", deviceDetails[7]);
      }
      capabilities.setCapability("automationName", "Appium");
      capabilities.setCapability("orientation", deviceDetails[9]);
      capabilities.setCapability("user", this.perfectoUserName);
      capabilities.setCapability("password", this.perfectoPassword);
      capabilities.setCapability("cameraInstrument", true);
      appiumdriver = new IOSDriver(new URL(this.url), capabilities);
      System.out.println(appiumdriver);
    }
    catch (Exception e)
    {
      System.out.println("error ->" + e.getMessage());
      e.printStackTrace();
      String ErrToRep = e.getMessage().substring(0, 
        e.getMessage().indexOf("Command duration") - 1);
      System.out.println(ErrToRep);
      return null;
    }
    if (appiumdriver != null)
    {
      Thread.sleep(25000L);
      appiumdriver.launchApp();
    }
    return appiumdriver;
  }
  
  public AppiumDriver<WebElement> initNativeAndroidDriver(String[] deviceDetails)
    throws InterruptedException
  {
    try
    {
      DesiredCapabilities capabilities = new DesiredCapabilities();
      
      System.out.println(Create_TestNGXML.getConfigData("AppPackageName"));
      capabilities.setCapability("appPackage", Create_TestNGXML.getConfigData("AppPackageName"));
      capabilities.setCapability("autoInstrument", true);
      capabilities.setCapability("fullReset", false);
      if (deviceDetails[0].trim().length() > 0) {
        capabilities.setCapability("platformName", deviceDetails[0]);
      }
      if (deviceDetails[1].trim().length() > 0) {
        capabilities.setCapability("platformVersion", deviceDetails[1]);
      }
      if (deviceDetails[2].trim().length() > 0) {
        capabilities.setCapability("manufacturer", deviceDetails[2]);
      }
      if (deviceDetails[3].trim().length() > 0) {
        capabilities.setCapability("model", deviceDetails[3]);
      }
      if (deviceDetails[4].trim().length() > 0) {
        capabilities.setCapability("location", deviceDetails[4]);
      }
      if (deviceDetails[5].trim().length() > 0) {
        capabilities.setCapability("resolution", deviceDetails[5]);
      }
      if (deviceDetails[6].trim().length() > 0) {
        capabilities.setCapability("network", deviceDetails[6]);
      }
      if (deviceDetails[7].trim().length() > 0) {
        capabilities.setCapability("deviceName", deviceDetails[7]);
      }
      capabilities.setCapability("automationName", "Appium");
      
      capabilities.setCapability("user", this.perfectoUserName);
      capabilities.setCapability("password", this.perfectoPassword);
      capabilities.setCapability("cameraInstrument", true);
      appiumdriver = new AndroidDriver(new URL(this.url), capabilities);
      System.out.println(appiumdriver);
    }
    catch (Exception e)
    {
      String ErrToRep = e.getMessage().substring(0, e.getMessage().indexOf("Command duration") - 1);
      System.out.println(ErrToRep);
      return null;
    }
    if (appiumdriver != null)
    {
      Thread.sleep(25000L);
      appiumdriver.launchApp();
    }
    return appiumdriver;
  }
  
  public AppiumDriver<WebElement> initIOSDriver(String[] deviceDetails)
  {
    try
    {
      DesiredCapabilities capabilities = new DesiredCapabilities();
      if (deviceDetails[0].trim().length() > 0) {
        capabilities.setCapability("platformName", deviceDetails[0]);
      }
      if (deviceDetails[1].trim().length() > 0) {
        capabilities.setCapability("platformVersion", deviceDetails[1]);
      }
      if (deviceDetails[2].trim().length() > 0) {
        capabilities.setCapability("manufacturer", deviceDetails[2]);
      }
      if (deviceDetails[3].trim().length() > 0) {
        capabilities.setCapability("model", deviceDetails[3]);
      }
      if (deviceDetails[4].trim().length() > 0) {
        capabilities.setCapability("location", deviceDetails[4]);
      }
      if (deviceDetails[5].trim().length() > 0) {
        capabilities.setCapability("resolution", deviceDetails[5]);
      }
      if (deviceDetails[6].trim().length() > 0) {
        capabilities.setCapability("network", deviceDetails[6]);
      }
      if (deviceDetails[7].trim().length() > 0) {
        capabilities.setCapability("deviceName", deviceDetails[7]);
      }
      capabilities.setCapability("automationName", "Appium");
      capabilities.setCapability("orientation", deviceDetails[9]);
      capabilities.setCapability("user", this.perfectoUserName);
      capabilities.setCapability("password", this.perfectoPassword);
      appiumdriver = new IOSDriver(new URL(this.url), capabilities);
      System.out.println(appiumdriver);
      appiumdriver.get(this.appURL);
    }
    catch (Exception e)
    {
      System.out.println(e.getMessage());
      log.error("Error in getting driver");
      e.printStackTrace();
    }
    return appiumdriver;
  }
  
  public AppiumDriver<WebElement> initAndroidDriver(String[] deviceDetails)
  {
    try
    {
      DesiredCapabilities capabilities = new DesiredCapabilities();
      if (deviceDetails[0].trim().length() > 0) {
        capabilities.setCapability("platformName", deviceDetails[0]);
      }
      if (deviceDetails[1].trim().length() > 0) {
        capabilities.setCapability("platformVersion", deviceDetails[1]);
      }
      if (deviceDetails[2].trim().length() > 0) {
        capabilities.setCapability("manufacturer", deviceDetails[2]);
      }
      if (deviceDetails[3].trim().length() > 0) {
        capabilities.setCapability("model", deviceDetails[3]);
      }
      if (deviceDetails[4].trim().length() > 0) {
        capabilities.setCapability("location", deviceDetails[4]);
      }
      if (deviceDetails[5].trim().length() > 0) {
        capabilities.setCapability("resolution", deviceDetails[5]);
      }
      if (deviceDetails[6].trim().length() > 0) {
        capabilities.setCapability("network", deviceDetails[6]);
      }
      if (deviceDetails[7].trim().length() > 0) {
        capabilities.setCapability("deviceName", deviceDetails[7]);
      }
      capabilities.setCapability("automationName", "Appium");
      capabilities.setCapability("orientation", deviceDetails[9]);
      capabilities.setCapability("user", this.perfectoUserName);
      capabilities.setCapability("password", this.perfectoPassword);
      appiumdriver = new AndroidDriver(new URL(this.url), capabilities);
      appiumdriver.get(this.appURL);
      System.out.println(appiumdriver);
    }
    catch (Exception e)
    {
      System.out.println("Error in getting driver ->" + e.getMessage());
      e.printStackTrace();
    }
    return appiumdriver;
  }
  
  public WebDriver initIEDriver(String appURL)
  {
    System.out.println("Launching Internet Explorer with new profile..");
    System.setProperty("webdriver.ie.driver", this.driverPath + "IEDriverServer.exe");
    DesiredCapabilities cap = DesiredCapabilities.internetExplorer();
    
    cap.setCapability("ignoreProtectedModeSettings", true);
    cap.setCapability("nativeEvents", false);
    cap.setCapability("unexpectedAlertBehaviour", "accept");
    cap.setCapability("ignoreProtectedModeSettings", true);
    cap.setCapability("disable-popup-blocking", true);
    cap.setCapability("enablePersistentHover", true);
    cap.setCapability("ignoreZoomSetting", true);
    cap.setJavascriptEnabled(true);
    driver = new InternetExplorerDriver(cap);
    driver.manage().window().maximize();
    driver.navigate().to(appURL);
    return driver;
  }
  
  public WebDriver initPhantomJSDriver(String appURL)
  {
    System.out.println("Launching PhantomJS browser with new profile..");
    String src = this.driverPath + "phantomjs.exe";
    System.out.println(src);
    System.setProperty("phantomjs.binary.path", src);
    DesiredCapabilities cap = DesiredCapabilities.phantomjs();
    cap.setJavascriptEnabled(true);
    cap.setCapability("phantomjs.binary.path", System.getProperty("phantomjs.binary.path"));
    driver = new PhantomJSDriver();
    driver.manage().window().maximize();
    driver.navigate().to(appURL);
    return driver;
  }
  
  private WebDriver initChromeDriver(String appURL)
  {
    System.out.println("Launching google chrome with new profile..");
    System.setProperty("webdriver.chrome.driver", this.driverPath + "chromedriver.exe");
    WebDriver driver = new ChromeDriver();
    driver.manage().window().maximize();
    driver.navigate().to(appURL);
    return driver;
  }
  
  private WebDriver initFirefoxDriver(String appURL)
  {
    System.out.println("Launching Firefox browser..");
    System.setProperty("webdriver.gecko.driver", this.driverPath + "geckodriver.exe");
    DesiredCapabilities capabilities = DesiredCapabilities.firefox();
    capabilities.setCapability("marionette", true);
    driver = new FirefoxDriver(capabilities);
    driver.manage().window().maximize();
    driver.navigate().to(appURL);
    return driver;
  }
  
  private WebDriver initHeadLessFirefoxDriver(String appURL)
  {
    System.out.println("Launching Firefox Headless browser..");
    FirefoxBinary binary = new FirefoxBinary();
    binary.addCommandLineOptions(new String[] { "--headless" });
    System.setProperty("webdriver.gecko.driver", this.driverPath + "geckodriver.exe");
    
    FirefoxProfile profile = new FirefoxProfile();
    DesiredCapabilities capabilities = DesiredCapabilities.firefox();
    capabilities.setCapability("marionette", true);
    driver = new FirefoxDriver(binary, profile, capabilities);
    driver.manage().window().maximize();
    driver.navigate().to(appURL);
    return driver;
  }
  
  @Parameters({"deviceType", "reportID", "deviceValue", "appURL", "tcID"})
  @BeforeClass
  public void initializeTestBaseSetup(String deviceType, String reportID, String deviceValue, String appURL, String tcID)
    throws Exception
  {
    ExtentTestManager.startTest(tcID);
    DocTestManager.startTest(tcID);
    System.out.println("Test-->" + deviceType);
    this.TC_ID = tcID;
    this.appURL = appURL;
    if (bFlag.equalsIgnoreCase("true")) {
      VideoRecorderStart();
    }
    try
    {
      if (deviceType.equalsIgnoreCase("Perfecto Web"))
      {
        String[] device = getDeviceParameter(deviceType, deviceValue);
        setDriver(2, device);
      }
      if (deviceType.equalsIgnoreCase("Perfecto Mobile"))
      {
        String[] device = getDeviceParameter(deviceType, deviceValue);
        setDriver(1, device);
      }
      if (deviceType.equalsIgnoreCase("Desktop Web"))
      {
        String[] device = getDeviceParameter(deviceType, deviceValue);
        setDriver(3, device);
      }
      if (deviceType.equalsIgnoreCase("HeadLess"))
      {
        String[] device = getDeviceParameter(deviceType, deviceValue);
        setDriver(4, device);
      }
    }
    catch (Exception e)
    {
      System.out.println("Error in initialize Test Base Setup function....." + e.getMessage());
    }
  }
  
  @AfterClass
  public void classTearDown()
    throws Exception
  {
    if (appiumdriver != null) {
      appiumdriver.close();
    }
    if (driver != null) {
      driver.close();
    }
    ExtentManager.getReporter().endTest(ExtentTestManager.getTest());
    ExtentManager.getReporter().flush();
    this.w.kill("WerFault.exe");
    DocTestManager.endTest(DocTestManager.getTest());
    
    QCConnection.UpdateStatus(this.TC_ID, ExtentTestManager.getTest().getRunStatus().toString());
    if (bFlag.equalsIgnoreCase("true")) {
      VideoRecordingStop();
    }
  }
  
  @AfterSuite
  public void tearDown()
  {
    if (appiumdriver != null) {
      appiumdriver.quit();
    }
    if (driver != null) {
      driver.quit();
    }
  }
  
  public String[] getDeviceParameter(String deviceType, String deviceValue)
  {
    String[] value = null;
    
    int index = 0;
    if (deviceValue.equalsIgnoreCase("DeviceCapability_Value1")) {
      index = 0;
    }
    if (deviceValue.equalsIgnoreCase("DeviceCapability_Value2")) {
      index = 1;
    }
    if (deviceValue.equalsIgnoreCase("DeviceCapability_Value3")) {
      index = 2;
    }
    if (deviceValue.equalsIgnoreCase("DeviceCapability_Value4")) {
      index = 3;
    }
    if (deviceValue.equalsIgnoreCase("DeviceCapability_Value5")) {
      index = 4;
    }
    if (deviceType.equalsIgnoreCase("Perfecto Web"))
    {
      value = new String[6];
      for (int i = 0; i < value.length; i++) {
        value[i] = Create_TestNGXML.WebValue[index][i];
      }
    }
    if (deviceType.equalsIgnoreCase("Perfecto Mobile"))
    {
      value = new String[10];
      for (int i = 0; i < value.length; i++) {
        value[i] = Create_TestNGXML.mobileValue[index][i];
      }
    }
    if (deviceType.equalsIgnoreCase("Desktop Web"))
    {
      value = new String[1];
      value[0] = Create_TestNGXML.desktopValue[index][0];
    }
    if (deviceType.equalsIgnoreCase("HeadLess"))
    {
      value = new String[1];
      value[0] = Create_TestNGXML.headLess[index][0];
    }
    return value;
  }
  
  
  
  public void VideoRecordingStop()
  {
    try
    {
      this.recorder.stop();
    }
    catch (ATUTestRecorderException e)
    {
      e.printStackTrace();
    }
  }
}
